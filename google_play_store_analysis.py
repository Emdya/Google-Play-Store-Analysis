# -*- coding: utf-8 -*-
"""Google Play Store Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ymZaFzd0uZpiqYawnhGPF5d-LrHoPTYU
"""

#Importing the important Python modules for our project
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df_store = pd.read_csv("/googleplaystore.csv")

df_store.head()

#Print the summary informations about our data set
df_store.info()

#Generate descriptive statistics of numerical columns
df_store.describe()

df_store.duplicated()

#Handling missing values:
df_store.dropna(inplace=True) #Drop rows with missing values
#Dealing with Duplicates
df_store.drop_duplicates(inplace=True) #Remove duplicate rows

df_store.info()

df_store.duplicated().sum() #We now have 0 duplicates

#Change the data type of Installs Column to numerical data and remove the columns and plus symbols
df_store['Installs'] = df_store['Installs'].str.replace('+',' ') #Remove '+' sign
df_store['Installs'] = df_store['Installs'].str.replace(',','') #Remove ',' sign

df_store['Installs'] = df_store['Installs'].astype(int) #Change the data type to int

#Change the data type of Reviews Column to numerical data type:
df_store['Reviews'] = df_store['Reviews'].astype(int) #Change the data type to int

df_store.head()

#Bar Plot
plt.figure(figsize = (10,6))
sns.countplot(data=df_store,x='Category')
plt.xlabel('Category')
plt.xticks(rotation=90)
plt.ylabel('Count')
plt.title('Distribution of App Categories')

#Scatter Plot
plt.figure(figsize=(10,6))
sns.scatterplot(data=df_store,x='Reviews',y='Rating')
plt.xlabel('Number of Reviews')
plt.ylabel('Rating')
plt.title('Relationship between Reviews and Rating')

#Box Plot
plt.figure(figsize=(10,6))
sns.boxplot(data=df_store,x='Category',y='Installs')
plt.xlabel('Category')
plt.xticks(rotation=90)
plt.ylabel('Installs')
plt.title('Distribution of Installs across Categories')

df_store.head()

from scipy.stats import ttest_ind
#Splitting the data set into free and paid applications
free_apps = df_store[df_store['Type'] == 'Free']
paid_apps = df_store[df_store['Type'] == 'Paid']

#Performing tTests
t_stat,p_value = ttest_ind(free_apps['Rating'],paid_apps['Rating'])

p_value

#Checking the p-value
if p_value < 0.05:
    print("Reject null hypothesis: There is a significant difference in ratings")
else:
    print("Fail to reject null hypothesis: There is no significant difference in ratings.")

#Scatter plot of Ratings vs. Installs
plt.figure(figsize=(12,8))
sns.scatterplot(data=df_store,x='Rating',y='Installs',hue='Category')
plt.grid(True)
plt.xlabel('Rating')
plt.ylabel('Number of Installs')
plt.title('Relationship between Installs and Rating')
plt.legend(bbox_to_anchor=(1.05,1),loc=2,borderaxespad=0.)
plt.show()

#Convert 'Last Updated' to dateTime
df_store['Last Updated'] = pd.to_datetime(df_store['Last Updated'])
#Set 'Last Updated' as the index
df_store.set_index('Last Updated',inplace=True)
#Resample 'Rating' to monthly frequency
df_store_monthly = df_store['Rating'].resample('M').mean()

plt.figure(figsize=(10,6))
sns.lineplot(data= df_store_monthly)
plt.xlabel('Date of last update (Monthly)')
plt.xticks(rotation=90)
plt.ylabel('Average Rating')
plt.title('Average Rating Trend Over Time (Monthly)')
plt.show()